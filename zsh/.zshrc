# This file sources other configuration files to keep things modular.
# This .zshrc is located within your dotfiles directory, symlinked to ~/.zshrc.
# The order of sourcing is critical!

# Basic shell setup - check if interactive
# =========================================================================
# Only load interactive-specific configurations in interactive shells.
# This prevents issues when running non-interactive scripts that start with zsh.
if [[ $- == *i* ]]; then

  # =================================================================
  # TMUX Session Manager
  # =================================================================

  if [[ -z "$TMUX" ]] && [[ $- == *i* ]] && command -v tmux &>/dev/null; then
    # Color definitions
    local red="\033[31m" green="\033[32m" yellow="\033[33m" reset="\033[0m"
    
    # Get existing sessions
    local sessions=(${(f)"$(tmux list-sessions -F '#{session_name}' 2>/dev/null)"})
    local session_count=${#sessions}
    local choice

    if (( session_count > 0 )); then
      echo "${green}\nTMUX Sessions:${reset}"
      tmux list-sessions
      echo "${yellow}\nPress Enter to attach ${sessions[1]}"
      echo "Options: [number] | n(new) | q(quit)${reset}"

      read -t 30 "choice?Choice (${sessions[1]}/n/q): "
      
      case "$choice" in
        ""|1) 
          tmux attach -t "${sessions[1]}" || echo "${red}Attach failed!${reset}" ;;
        [2-9])
          if (( choice <= session_count )); then
            tmux attach -t "${sessions[choice]}" || echo "${red}Invalid session!${reset}"
          else
            echo "${red}No session $choice${reset}"
          fi ;;
        n|N)
          read "session_name?Session name (default=main): "
          session_name="${session_name//[^a-zA-Z0-9_]/_}"
          tmux new-session -A -s "${session_name:-main}" ;;
        q|Q) : ;;
        *) echo "${red}Invalid choice!${reset}" ;;
      esac
    else
      echo "${yellow}No existing sessions${reset}"
      read "choice?Create new? [Y/n]: "
      case "$choice" in
        n|N) : ;;
        *)
          read "session_name?Session name (default=main): "
          session_name="${session_name//[^a-zA-Z0-9_]/_}"
          tmux new-session -A -s "${session_name:-main}" ;;
      esac
    fi
  fi

  # Instant Prompt (Powerlevel10k) - Load extremely early for perceived speed
  # =========================================================================
  # Load Powerlevel10k instant prompt cache. Keep this near the top!
  # This path is standard and typically outside the dotfiles directory.
  if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
    source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
  fi


  # Plugin Management (Antidote) and Completions
  # =========================================================================
  # Initialize Zsh's completion system. Your original config did this before
  # loading Antidote, so we'll maintain that order.
  autoload -Uz compinit
  compinit
  # A more common pattern is `compinit -D` *after* loading plugins, but follow
  # Antidote's specific recommendations if they differ. Let's add a second
  # compinit -D after plugins, which is generally safer for completion robustness.

  # Load Antidote from its installation directory.
  # Ensure this path is correct for your setup. This is typically a fixed install location.
  source ${ZDOTDIR:-~}/.antidote/antidote.zsh

  # Define the base directory for your Zsh configuration within your dotfiles.
  # Use ${ZDOTDIR:-$HOME} which correctly resolves to your home or ZDOTDIR.
  local dotfiles_zsh_dir="${ZDOTDIR:-$HOME}/Arch-dotfiles/zsh"

  # Path to plugin list and generated file.
  local plugins_txt_path="$dotfiles_zsh_dir/zsh_plugins.txt"
  local plugins_zsh_path="$dotfiles_zsh_dir/zsh_plugins.zsh"

  if [[ ! -f "$plugins_zsh_path" ]]; then
    echo "Generating $plugins_zsh_path..."
    if [[ -f "$plugins_txt_path" ]]; then
      antidote bundle < "$plugins_txt_path" > "$plugins_zsh_path"
      echo "Done generating plugins."
    else
      echo "Error: $plugins_txt_path not found! Cannot generate plugin sourcing file."
      echo "Please ensure $plugins_txt_path exists."
    fi
  fi
  # Source the file generated by Antidote which loads your plugins.
  source "$plugins_zsh_path" || echo "Error sourcing $plugins_zsh_path"

  # Re-run compinit -D after all plugins (which might provide completions) are loaded.
  # This is crucial for dynamic completion loading and can resolve completion issues.
  compinit -D


  # Source Modular Configuration Files
  # =========================================================================
  # Define the base directory for your modular Zsh configuration files.
  # This is the same directory where this .zshrc file resides (via symlink).
  local zsh_config_dir="$dotfiles_zsh_dir" # This is the same variable, just aliased for clarity if needed

  # Source the modular files in a logical sequence from the determined directory.
  if [[ -d "$zsh_config_dir" ]]; then
    # Order explained below, but roughly: Environment -> Behavior -> Commands -> Interactive
    source "$zsh_config_dir/path.zsh"         || echo "Error sourcing $zsh_config_dir/path.zsh"
    source "$zsh_config_dir/env_vars.zsh"     || echo "Error sourcing $zsh_config_dir/env_vars.zsh"
    source "$zsh_config_dir/setopt.zsh"       || echo "Error sourcing $zsh_config_dir/setopt.zsh"
    # Aliases and functions define commands. Source them after environment is ready.
    source "$zsh_config_dir/aliases.zsh"      || echo "Error sourcing $zsh_config_dir/aliases.zsh"
    source "$zsh_config_dir/functions.zsh"    || echo "Error sourcing $zsh_config_dir/functions.zsh"
    # Keybindings define interactive behavior, often relying on functions/aliases. Source last.
    source "$zsh_config_dir/keybindings.zsh"  || echo "Error sourcing $zsh_config_dir/keybindings.zsh"
  else
    echo "Warning: Modular Zsh config directory '$zsh_config_dir' not found. Skipping modular config."
    echo "Please ensure your Zsh dotfiles are in '$dotfiles_zsh_dir'."
  fi


  # Load Powerlevel10k config - Typically loaded last
  # =========================================================================
  # Source the Powerlevel10k configuration file. This applies prompt styles
  # after most other shell settings are established.
  # This file is typically located in your home directory (~/).
  # If you moved this file, update the path accordingly.
  [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

fi # End of interactive shell check

# Any configuration that *must* run in non-interactive shells (e.g., basic PATH
# adjustments for scripts) would go here, outside the 'if' block. Based on your
# current config, everything seems interactive-specific.

# End of .zshrc
# =========================================================================
